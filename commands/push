cove_push() {
    # --- UI/Logging Functions ---
    log_step() { 
        echo ""
        gum style --bold --foreground "yellow" "➡️  $1"
    }
    log_success() { 
        gum style --foreground "green" "✅ $1" 
    }
    log_error() {
        gum style --foreground "red" "❌ ERROR: $1" 
        >&2
        exit 1
    }

    # Define quiet SSH options to prevent host key warnings
    local ssh_opts="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"

    gum style --border normal --margin "1" --padding "1 2" --border-foreground 212 "This tool will guide you through pushing a local Cove site to a remote server."

    # --- 1. Choose Local Site ---
    log_step "Choose a local site to push"
    local wp_sites=()
    for site_dir in "$SITES_DIR"/*.localhost; do
        if [ -f "$site_dir/public/wp-config.php" ]; then
            wp_sites+=("$(basename "$site_dir" .localhost)")
        fi
    done

    if [ ${#wp_sites[@]} -eq 0 ]; then
        log_error "No local WordPress sites found to push."
    fi

    local site_name
    site_name=$(gum choose "${wp_sites[@]}")
    if [ -z "$site_name" ]; then log_error "No site selected."; fi

    local local_path="$SITES_DIR/$site_name.localhost/public"
    
    # --- 2. Gather Remote Info ---
    log_step "Enter remote server details"
    local remote_ssh
    remote_ssh=$(gum input --placeholder "user@host.com -p 2222" --prompt "SSH Connection: ")
    if [ -z "$remote_ssh" ]; then log_error "SSH connection cannot be empty."; fi

    # Trim the "ssh " prefix if the user includes it.
    remote_ssh="${remote_ssh##ssh }"

    local remote_path
    remote_path=$(gum input --value "public/" --prompt "Path to Remote WordPress Root: ")
    if [ -z "$remote_path" ]; then log_error "Remote path cannot be empty."; fi
    
    # --- 3. Validate Remote Site ---
    log_step "Validating remote WordPress site..."
    local remote_url
    remote_url=$(ssh $ssh_opts $remote_ssh "cd $remote_path && wp option get home 2>/dev/null")
    
    if [ -z "$remote_url" ] || [[ ! "$remote_url" == http* ]]; then
        log_error "Could not find a valid WordPress site at the specified path. Check your connection details and path."
    fi
    log_success "Found remote site to overwrite: $remote_url"

    # --- 4. Confirmation ---
    if ! gum confirm "🚨 Are you sure you want to push '${site_name}' to '${remote_url}'? This will completely overwrite the remote site's files and database."; then
        echo "🚫 Push cancelled."
        exit 0
    fi

    # --- 5. Perform Local Backup ---
    log_step "Generating local backup for ${site_name}..."
    local backup_filename
    backup_filename=$( (cd "$local_path" && curl -sL https://captaincore.io/do | bash -s -- backup . --quiet --format=filename) )
    
    if [[ ! -f "$backup_filename" || ! "$backup_filename" == *".zip" ]]; then
        log_error "Failed to generate local backup. The captaincore script might have failed."
    fi
    
    size=$(ls -lh "$backup_filename" | awk '{print $5}')
    log_success "Local backup created: ${backup_filename} ($size)"

    # --- 6. Upload Backup ---
    log_step "Uploading backup to remote server..."
    if ! cat "$backup_filename" | ssh $ssh_opts $remote_ssh "cat > '$remote_path/$backup_filename'"; then
        # Clean up local backup on failure
        rm -f "$backup_filename"
        log_error "Failed to upload backup."
    fi
    log_success "Upload complete."

    # --- 7. Remote Restore ---
    log_step "Restoring backup on remote server..."
    if ! ssh $ssh_opts $remote_ssh "cd '$remote_path' && curl -sL https://captaincore.io/do | bash -s -- migrate --url='$backup_filename' --update-urls"; then
        log_error "The remote migration script failed to execute correctly."
    fi
    log_success "Remote restore complete."

    # --- 8. Cleanup ---
    log_step "Cleaning up backup files..."
    rm -f "$backup_filename"
    ssh $ssh_opts $remote_ssh "rm -f '$remote_path/$backup_filename'"
    log_success "Cleanup complete."

    # --- 9. Finalize ---
    gum style --border normal --margin "1" --padding "1 2" --border-foreground 212 "✨ All done! Your site has been pushed successfully." "Remote URL: ${remote_url}"
}