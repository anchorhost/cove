cove_login() {
    local site_name="$1"
    local user_identifier="$2" # Optional second argument for the user

    # 1. Validate that a site name was provided.
    if [ -z "$site_name" ]; then
        gum style --foreground red "‚ùå Error: A site name is required."
        echo "Usage: cove login <site> [<user>]"
        exit 1
    fi

    local site_dir="$SITES_DIR/$site_name.localhost"
    local public_dir="$site_dir/public"

    # 2. Check if the site exists and is a WordPress installation.
    if [ ! -d "$site_dir" ] || [ ! -f "$public_dir/wp-config.php" ]; then
        gum style --foreground red "‚ùå Error: WordPress site '$site_name.localhost' not found."
        exit 1
    fi

    local admin_to_login
    if [ -n "$user_identifier" ]; then
        echo "üîé Verifying user '$user_identifier' for '$site_name.localhost'..."
        local user_roles
        user_roles=$( (cd "$public_dir" && wp user get "$user_identifier" --field=roles --format=json --skip-plugins --skip-themes 2>/dev/null) )

        if [ -z "$user_roles" ]; then
            gum style --foreground red "‚ùå Error: User '$user_identifier' not found on this site."
            exit 1
        fi

        if ! echo "$user_roles" | grep -q "administrator"; then
            gum style --foreground red "‚ùå Error: User '$user_identifier' is not an administrator."
            exit 1
        fi
        
        admin_to_login="$user_identifier"
        echo "‚úÖ User '$admin_to_login' verified."
    else
        echo "üîé Finding an administrator for '$site_name.localhost'..."
        admin_to_login=$( (cd "$public_dir" && wp user list --role=administrator --field=user_login --format=csv --skip-plugins --skip-themes | head -n 1) )

        if [ -z "$admin_to_login" ]; then
            gum style --foreground red "‚ùå Error: Could not find any administrator users for this site."
            exit 1
        fi
        echo "‚úÖ Found admin: '$admin_to_login'."
    fi

    # 3. Attempt to generate the login URL.
    echo "   Generating login link..."
    local login_url
    # Suppress stderr on the first try so we can handle the error gracefully.
    login_url=$( (cd "$public_dir" && wp user login "$admin_to_login" ) 2>/dev/null )
    local exit_code=$?

    # 4. If the command failed, check for the mu-plugin and retry.
    if [ $exit_code -ne 0 ]; then
        echo "   ‚ö†Ô∏è Login command failed. Checking for missing MU-plugin..."
        local mu_plugin_path="$public_dir/wp-content/mu-plugins/captaincore-helper.php"
        
        if [ ! -f "$mu_plugin_path" ]; then
            # The plugin is missing, so inject it.
            inject_mu_plugin "$public_dir"
            
            echo "   - Retrying login link generation..."
            # Run the command again, but this time, show errors if it fails.
            login_url=$( (cd "$public_dir" && wp user login "$admin_to_login" --skip-plugins --skip-themes) )
        else
            # The plugin exists, so the failure is for another reason.
            echo "   - MU-plugin is already present. The issue may be with WP-CLI or the site's database."
        fi
    fi

    # 5. Display the final URL or an error message.
    if [ -n "$login_url" ]; then
        gum style --border normal --margin "1" --padding "1 2" --border-foreground 212 "üîó One-Time Login URL for '$admin_to_login'" "$login_url"
    else
        gum style --foreground red "‚ùå Error: Failed to generate the login link after all checks."
        exit 1
    fi
}