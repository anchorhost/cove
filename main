#!/bin/bash

# ====================================================
#  Cove - Main Script
#  Contains global configurations, helper functions,
#  and the main command routing logic.
# ====================================================

# --- Configuration ---
COVE_DIR="$HOME/Cove"
CONFIG_FILE="$COVE_DIR/config"
CADDYFILE_PATH="$COVE_DIR/Caddyfile"

APP_DIR="$COVE_DIR/App"
SITES_DIR="$COVE_DIR/Sites"
LOGS_DIR="$COVE_DIR/Logs"

# App Sub-directories
GUI_DIR="$APP_DIR/gui"
ADMINER_DIR="$APP_DIR/adminer"
CUSTOM_CADDY_DIR="$APP_DIR/directives"

PROTECTED_NAMES="cove"
COVE_VERSION="1.0"
CADDY_CMD="frankenphp"

# --- Whoops Bootstrap Generation ---
create_whoops_bootstrap() {
    echo "📜 Creating Whoops bootstrap file..."
    cat > "$APP_DIR/whoops_bootstrap.php" << 'EOM'
<?php
// This script is automatically included before any other PHP script.
// It registers a simple PSR-4 autoloader for the Whoops library.

spl_autoload_register(function ($class) {
    $prefix = 'Whoops\\';
    $base_dir = __DIR__ . '/whoops/src/Whoops/';
    
    $len = strlen($prefix);
    if (strncmp($prefix, $class, $len) !== 0) {
        return;
    }
    
    $relative_class = substr($class, $len);
    $file = $base_dir . str_replace('\\', '/', $relative_class) . '.php';

    if (file_exists($file)) {
        require $file;
    }
});

$whoops = new \Whoops\Run;

// Using the built-in method from the API docs to silence non-fatal errors.
// We are silencing every level except for fatal errors across all files.
$whoops->silenceErrorsInPaths(
    '/.*/', // A regex that matches all file paths
    E_ALL & ~E_ERROR & ~E_PARSE & ~E_CORE_ERROR & ~E_COMPILE_ERROR & ~E_USER_ERROR
);

// The PrettyPageHandler will now only be triggered for fatal errors.
$whoops->pushHandler(new \Whoops\Handler\PrettyPageHandler);
$whoops->register();
EOM
}

# --- Helper Functions ---

# Load configuration from ~/Cove/config
source_config() {
    if [ -f "$CONFIG_FILE" ]; then
        # shellcheck source=/dev/null
        source "$CONFIG_FILE"
    else
        echo "❌ Error: Cove config file not found. Please run 'cove install'."
        exit 1
    fi
}

# Function to check for required dependencies
check_dependencies() {
    # Check for Caddy/FrankenPHP
    if ! command -v "$CADDY_CMD" &> /dev/null && ! [ -x "$CADDY_CMD" ]; then
        gum style --foreground red "❌ Caddy/FrankenPHP not found. Please run 'cove install'."
        exit 1
    fi

    # Check for other dependencies
    for pkg_cmd in mariadb mailpit "wp:wp-cli" gum; do
        local pkg=${pkg_cmd##*:}
        local cmd=${pkg_cmd%%:*}
        if ! command -v $cmd &> /dev/null; then
            gum style --foreground red "❌ Dependency '$cmd' not found. Please run 'cove install'."
            exit 1
        fi
    done
}

# Function to regenerate the Caddyfile
regenerate_caddyfile() {
    echo "🔄 Regenerating Caddyfile..."
    if ! command -v mailpit &> /dev/null; then
        gum style --foreground red "❌ Mailpit is not installed. Please run 'cove install' successfully first."
        return 1
    fi
    local mailpit_path
    mailpit_path="$(brew --prefix mailpit)/bin/mailpit"

    # Write the static header of the Caddyfile
    cat > "$CADDYFILE_PATH" <<- EOM
{
    frankenphp {
        php_ini sendmail_path "$mailpit_path sendmail -t"
        php_ini log_errors On
        php_ini error_log "$LOGS_DIR/errors.log"
        php_ini auto_prepend_file "$APP_DIR/whoops_bootstrap.php"
    }
    order php_server before file_server
}

# --- Global Services ---

mail.cove.localhost {
    reverse_proxy 127.0.0.1:8025
    tls internal
}

db.cove.localhost {
    root * "$ADMINER_DIR"
    php_server
    tls internal
}

cove.localhost {
    root * "$GUI_DIR"
    php_server
    tls internal
}

# --- Cove Managed Sites ---
EOM

    # Append blocks for each site dynamically
    if [ -d "$SITES_DIR" ]; then
        for site_path in "$SITES_DIR"/*; do
            if [ -d "$site_path" ]; then
                local site_name
                site_name=$(basename "$site_path")
                
                echo "$site_name {" >> "$CADDYFILE_PATH"
                
                echo "    root * \"$site_path/public\"" >> "$CADDYFILE_PATH"
                echo "    encode gzip" >> "$CADDYFILE_PATH"
                echo "    tls internal" >> "$CADDYFILE_PATH"
                
                echo "    log {" >> "$CADDYFILE_PATH"
                echo "        output file \"$site_path/logs/caddy.log\"" >> "$CADDYFILE_PATH"
                echo "    }" >> "$CADDYFILE_PATH"
                
                echo "    php_server" >> "$CADDYFILE_PATH"

                if [ ! -f "$site_path/public/wp-config.php" ]; then
                    echo "    file_server" >> "$CADDYFILE_PATH"
                fi
                
                local custom_conf_file="$CUSTOM_CADDY_DIR/$site_name"
                if [ -f "$custom_conf_file" ]; then
                    echo "" >> "$CADDYFILE_PATH"
                    sed 's/^/    /' "$custom_conf_file" >> "$CADDYFILE_PATH"
                    echo "" >> "$CADDYFILE_PATH"
                fi

                echo "}" >> "$CADDYFILE_PATH"
                echo "" >> "$CADDYFILE_PATH"
            fi
        done
    fi

    # Reload Caddy with the new configuration
    if "$CADDY_CMD" reload --config "$CADDYFILE_PATH" --address localhost:2019; then
        echo "✅ Caddy configuration reloaded."
    else
        gum style --foreground red "❌ Caddy configuration failed to reload. See error above."
    fi
}

# --- GUI Generation ---
create_gui_file() {
    echo "🎨 Creating Cove dashboard file..."
    mkdir -p "$GUI_DIR"
    
    cat > "$GUI_DIR/index.php.tmp" << 'EOM'
<?php
$sitedir = 'SITES_DIR_PLACEHOLDER';
$config_file = getenv('HOME') . '/Cove/config';
$message = '';
$refresh_script = '';
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $cove_path = 'COVE_EXECUTABLE_PATH';
    if (isset($_POST['add_site'])) {
        $site_name = trim($_POST['site_name']);
        $type_flag = isset($_POST['is_plain']) ? '--plain' : '';
        if (!empty($site_name) && preg_match('/^[a-zA-Z0-9-]+$/', $site_name)) {
            $command = sprintf('%s add %s %s > /dev/null 2>&1 &', escapeshellarg($cove_path), escapeshellarg($site_name), $type_flag);
            shell_exec($command);
            $message = "<p>✅ Site creation for '<strong>" . htmlspecialchars($site_name) . ".localhost</strong>' has been initiated.</p>";
            $refresh_script = '<script>setTimeout(() => window.location.reload(), 5000);</script>';
        } else {
            $message = "<p class='error'>Invalid site name. Use letters, numbers, and hyphens only.</p>";
        }
    } elseif (isset($_POST['delete_site'])) {
        $site_name = $_POST['site_name'];
        if (!empty($site_name)) {
            $command = sprintf('%s delete %s --force > /dev/null 2>&1 &', escapeshellarg($cove_path), escapeshellarg($site_name));
            shell_exec($command);
            $message = "<p>✅ Deletion for '<strong>" . htmlspecialchars($site_name) . ".localhost</strong>' has been initiated.</p>";
            $refresh_script = '<script>setTimeout(() => window.location.reload(), 2000);</script>';
        }
    }
}
$config_data = file_exists($config_file) ? parse_ini_file($config_file) : [];

// --- Prepare and Sort Site Data ---
$sites_info = [];
if (file_exists($sitedir)) {
    $items = scandir($sitedir);
    foreach ($items as $item) {
        if ($item === '.' || $item === '..') continue;
        $site_path = $sitedir . '/' . $item;
        if (is_dir($site_path)) {
            $sites_info[] = [
                'name' => str_replace('.localhost', '', $item),
                'domain' => 'https://' . $item,
                'type' => file_exists($site_path . "/public/wp-config.php") ? 'WordPress' : 'Plain',
                'display_path' => '~/Cove/Sites/' . $item,
                'full_path' => $site_path
            ];
        }
    }

    if (!empty($sites_info)) {
        array_multisort(
            array_column($sites_info, "type"), SORT_ASC,
            array_column($sites_info, "name"), SORT_ASC,
            $sites_info
        );
    }
}
?>
<!DOCTYPE html>
<html lang="en" x-data="{ theme: localStorage.getItem('theme') || 'dark', snackbar: { visible: false, message: '' } }" x-init="$watch('theme', val => localStorage.setItem('theme', val))" :data-theme="theme">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cove Dashboard</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Fira+Code&family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"/>
    <script src="//unpkg.com/alpinejs" defer></script>
    <style>
        :root {
            --pico-font-family: 'Inter', sans-serif;
            --pico-font-size: 95%;
            --pico-spacing: 0.75rem;
            --pico-card-padding: 1.25rem;
            --pico-form-element-spacing-vertical: 0.75rem;
            --pico-form-element-spacing-horizontal: 1rem;
        }
        code, pre, kbd {
            font-family: 'Fira Code', monospace;
        }
        [data-theme="light"], :root:not([data-theme="dark"]) {
            --pico-primary: #163c52;
            --pico-primary-hover: #1f5472;
            --pico-primary-focus: rgba(22, 60, 82, 0.25);
            --pico-card-background-color: #fdf4e9;
            --pico-card-border-color: #e9e2d9;
            --pico-code-background-color: #e9e2d9;
        }
        [data-theme="dark"] {
            --pico-primary: #00a9ff;
            --pico-primary-hover: #33bbff;
            --pico-primary-focus: rgba(0, 169, 255, 0.25);
            --pico-background-color: #1a1b26;
            --pico-card-background-color: #24283b;
            --pico-card-border-color: #414868;
            --pico-code-color: #ff9e64;
            --pico-code-background-color: #2e3247;
        }
        body { padding: 1rem; background-color: var(--pico-background-color); max-width: 1000px; margin: auto; }
        header { text-align: center; margin: 2rem 0; }
        .theme-toggle {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: transparent;
            border: none;
            padding: 0.5rem;
            cursor: pointer;
            font-size: 1.25rem;
            line-height: 1;
            width: auto;
            height: auto;
        }
        table { --pico-table-border-color: var(--pico-card-border-color); }
        article, figure { border-color: var(--pico-card-border-color); }
        .clickable-code {
            cursor: pointer;
            text-decoration: underline;
            text-decoration-style: dotted;
        }
        .clickable-code:hover {
            color: var(--pico-primary);
        }
        .snackbar {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 0.75rem 1.25rem;
            border-radius: var(--pico-border-radius);
            background-color: var(--pico-primary);
            color: var(--pico-primary-inverse);
            box-shadow: var(--pico-box-shadow);
            z-index: 1000;
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <button class="theme-toggle" @click="theme = (theme === 'light' ? 'dark' : 'light')" x-text="theme === 'light' ? '🌙' : '☀️'"></button>
    <main class="container">
        <header><h1>🏝️ Cove Dashboard</h1><p>Your local development environment, simplified.</p></header>
        <?php if ($message): ?><article><?= $message ?></article><?php endif; ?>
        
        <section>
            <h2>🚀 Quick Links</h2>
            <div class="grid">
                <a href="https://db.cove.localhost" target="_blank" rel="noopener noreferrer" role="button" class="secondary outline">🗃️ Manage Databases (Adminer)</a>
                <a href="https://mail.cove.localhost" target="_blank" rel="noopener noreferrer" role="button" class="secondary outline">✉️ Inspect Emails (Mailpit)</a>
           </div>
        </section>

        <section>
            <h2>✨ Add New Site</h2>
            <article x-data="{ siteName: '' }">
                <form method="POST">
                    <div class="grid">
                        <label>Site Name
                            <input type="text" name="site_name" required x-model="siteName" @input="siteName = siteName.toLowerCase().replace(/[^a-z0-9-]/g, '')">
                            <small>This will create <code x-text="siteName ? siteName + '.localhost' : '.localhost'"></code></small>
                        </label>
                        <label><input type="checkbox" name="is_plain">Plain Site</label>
                    </div>
                    <button type="submit">Create Site</button>
                </form>
            </article>
        </section>

        <section>
            <h2>🗂️ Managed Sites</h2>
            <?php if (!empty($sites_info)): ?>
            <figure>
            <table>
                <thead><tr><th>Site Domain</th><th>Type</th><th>Path</th><th>Actions</th></tr></thead>
                <tbody>
                <?php foreach ($sites_info as $site): ?>
                    <tr>
                        <td><a href="<?= htmlspecialchars($site['domain']) ?>" target="_blank" rel="noopener noreferrer">🔗 <?= htmlspecialchars(str_replace('https://', '', $site['domain'])) ?></a></td>
                        <td><?= htmlspecialchars($site['type']) ?></td>
                        <td>
                            <div @click="navigator.clipboard.writeText('<?= htmlspecialchars($site['full_path']) ?>'); snackbar.message = '✅ Path copied to clipboard!'; snackbar.visible = true; setTimeout(() => snackbar.visible = false, 2500)" style="cursor: pointer;display:inline-flex;" title="Click to copy path">
                                <small><code class="clickable-code"><?= htmlspecialchars($site['display_path']) ?></code></small>
                            </div>
                        </td>
                        <td>
                            <form method="POST" style="margin-bottom: 0;" onsubmit="return confirm('Are you sure you want to permanently delete <?= htmlspecialchars($site['name']) ?>? This cannot be undone.');">
                                <input type="hidden" name="site_name" value="<?= htmlspecialchars($site['name']) ?>"><button class="secondary outline">🗑️ Delete</button>
                            </form>
                        </td>
                    </tr>
                <?php endforeach; ?>
                </tbody>
            </table>
            </figure>
            <?php else: ?><article>No sites found. Add one above!</article><?php endif; ?>
        </section>

        <section>
            <h2>⚙️ Cove Configuration</h2>
            <article>
                <p>These are the credentials Cove uses to create new WordPress databases.</p>
                <pre><code><strong>Database User:</strong> <?= htmlspecialchars($config_data['DB_USER'] ?? 'Not set') ?>&#x000A;<strong>Database Password:</strong> <?= htmlspecialchars($config_data['DB_PASSWORD'] ?? 'Not set') ?></code></pre>
                <p><small>Configuration stored in <code><?= htmlspecialchars($config_file) ?></code>.</small></p>
            </article>
        </section>
    </main>
    <div x-show="snackbar.visible"
         x-transition:enter="transition ease-out duration-300"
         x-transition:enter-start="opacity-0 transform translate-y-2"
         x-transition:enter-end="opacity-100 transform translate-y-0"
         x-transition:leave="transition ease-in duration-300"
         x-transition:leave-start="opacity-100 transform translate-y-0"
         x-transition:leave-end="opacity-0 transform translate-y-2"
         class="snackbar"
         style="display: none;">
        <span x-text="snackbar.message"></span>
    </div>
    <?php if (!empty($refresh_script)) echo $refresh_script; ?>
</body>
</html>
EOM

    local script_dir
    script_dir=$(cd "$(dirname "$0")" && pwd)
    local absolute_script_path="$script_dir/$(basename "$0")"
    
    local escaped_path
    escaped_path=$(printf '%s\n' "$absolute_script_path" | sed -e 's/[\/&]/\\&/g')
    local escaped_sites_dir
    escaped_sites_dir=$(printf '%s\n' "$SITES_DIR" | sed -e 's/[\/&]/\\&/g')

    sed -e "s/COVE_EXECUTABLE_PATH/${escaped_path}/g" \
        -e "s/SITES_DIR_PLACEHOLDER/${escaped_sites_dir}/g" \
        "$GUI_DIR/index.php.tmp" > "$GUI_DIR/index.php"
    rm "$GUI_DIR/index.php.tmp"
}

# --- Help Functions ---
show_general_help() {
    echo "Cove - A tool for managing local development sites."
    echo ""
    echo "Usage: cove <command> [options]"
    echo ""
    echo "For help with a specific command, run: cove <command> --help"
    echo ""
    echo "Available Commands:"
    echo "  install          Installs and configures Homebrew dependencies."
    echo "  enable           Starts the Caddy, MariaDB, and Mailpit background services."
    echo "  disable          Stops all background services managed by Cove."
    echo "  status           Check the status of all background services."
    echo "  list             Lists all sites currently managed by Cove."
    echo "  add              Creates a new WordPress or plain static site."
    echo "  delete           Deletes a site's directory and associated database."
    echo "  directive        Add or remove custom Caddyfile rules for a site."
    echo "  db               Manage databases (e.g., 'cove db backup')."
    echo "  reload           Regenerates the Caddyfile and reloads the Caddy server."
    echo "  version          Displays the current version of Cove."
}

display_command_help() {
    local cmd="$1"
    case "$cmd" in
        install)
            echo "Usage: cove install"
            echo ""
            echo "Installs and configures Homebrew dependencies like Caddy, MariaDB, and Mailpit."
            echo "It also sets up the required directory structure inside '~/Cove'."
            ;;
        enable)
            echo "Usage: cove enable"
            echo ""
            echo "Starts the Caddy, MariaDB, and Mailpit background services."
            ;;
        disable)
            echo "Usage: cove disable"
            echo ""
            echo "Stops all background services managed by Cove."
            ;;
        status)
            echo "Usage: cove status"
            echo ""
            echo "Checks the status of all background services."
            ;;
        list)
            echo "Usage: cove list [--totals]"
            echo ""
            echo "Lists all sites currently managed by Cove, showing their domain and type (WordPress/Plain)."
            echo ""
            echo "Flags:"
            echo "  --totals       Calculates and displays the size of each site's public directory."
            ;;
        add)
            echo "Usage: cove add <name> [--plain]"
            echo ""
            echo "Creates a new local site accessible at 'https://<name>.localhost'."
            echo ""
            echo "Arguments:"
            echo "  <name>         The name for the new site. Becomes the subdomain."
            echo ""
            echo "Flags:"
            echo "  --plain        Creates a new static HTML site without a database."
            ;;
        delete)
            echo "Usage: cove delete <name> [--force]"
            echo ""
            echo "Deletes a site's directory and associated WordPress database."
            echo ""
            echo "Arguments:"
            echo "  <name>         The name of the site to delete."
            echo ""
            echo "Flags:"
            echo "  --force        Deletes a site without the interactive confirmation prompt."
            ;;
        directive)
            echo "Usage: cove directive <subcommand>"
            echo ""
            echo "Add or remove custom Caddyfile rules for a site."
            echo "Opens an editor to add/edit rules which are then included in the main Caddyfile."
            echo
            echo "Subcommands:"
            echo "  add         Adds a rule to the Caddyfile for the specified site."
            echo "  update      Updates a rule in the Caddyfile for the specified site."
            echo "  delete      Deletes custom rules from the Caddyfile for the specified site."
            echo "  list        Lists all custom directives for all managed sites."
            ;;
        db)
            echo "Usage: cove db <subcommand>"
            echo ""
            echo "Manage databases."
            echo ""
            echo "Subcommands:"
            echo "  backup      Creates a .sql dump for each WP site."
            echo "  list        Lists database connection details for each WP site."
            ;;
        reload)
            echo "Usage: cove reload"
            echo ""
            echo "Regenerates the Caddyfile and reloads the Caddy server gracefully."
            ;;
        version)
            echo "Usage: cove version"
            echo ""
            echo "Displays the current version of Cove."
            ;;
        *)
            echo "Error: Unknown command '$cmd'"
            echo ""
            show_general_help
            exit 1
            ;;
    esac
}

# --- Main Command Router ---
main() {
    # Check for a help flag anywhere in the arguments.
    for arg in "$@"; do
        if [[ "$arg" == "--help" || "$arg" == "-h" ]]; then
            local command_for_help="$1"
            # If the command is empty or a help flag, show general help.
            if [[ -z "$command_for_help" || "$command_for_help" == "--help" || "$command_for_help" == "-h" ]]; then
                show_general_help
                exit 0
            else
                # Otherwise, show help for the specific command.
                display_command_help "$command_for_help"
                exit 0
            fi
        fi
    done

    local command="$1"
    if [ -z "$command" ]; then
        show_general_help
        exit 0
    fi

    shift # Remove command from argument list

    case "$command" in
        add)
            check_dependencies
            cove_add "$@"
            ;;
        delete)
            check_dependencies
            cove_delete "$@"
            ;;
        list)
            check_dependencies
            cove_list "$@"
            ;;
        install)
            cove_install
            ;;
        enable)
            check_dependencies
            cove_enable
            ;;
        disable)
            check_dependencies
            cove_disable
            ;;
        reload)
            check_dependencies
            cove_reload
            ;;
        status)
            check_dependencies
            cove_status
            ;;
        db)
            check_dependencies
            local action="$1"
            shift # Remove subcommand from argument list to pass the rest to the function
            case "$action" in
                backup)
      
                    cove_db_backup "$@"
                    ;;
                list)
                    cove_db_list "$@"
                    ;;
                *)
                    display_command_help "db"
                    exit 0
                    ;;
            esac
            ;;
        directive)
            check_dependencies
            local action="$1"
            shift # Remove subcommand from argument list
            case "$action" in
                add|update)
                    cove_directive_add_or_update "$@" # New function name
                    ;;
                delete)
                    cove_directive_delete "$@" # New function name
                    ;;
                list)
                    cove_directive_list "$@"
                    ;;
                *)
                    display_command_help "directive"
                    exit 0
                    ;;
            esac
            ;;
        version)
            cove_version
            ;;
        *)
            echo "Error: Unknown command '$command'"
            echo ""
            show_general_help
            exit 1
            ;;
    esac
}